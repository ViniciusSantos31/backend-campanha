// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PROVIDER
  REQUESTER
}

enum Status {
  AVAILABLE
  OFFLINE
  BUSY
  PAUSED
}

enum ConferenceStatus {
  OPEN
  FINISHED
}

model User {
  id           String       @id @default(uuid())
  firstName    String
  lastName     String
  phone        String
  cpf          String
  doc          String?
  email        String       @unique
  userType     UserType     @default(REQUESTER)
  status       Status       @default(OFFLINE)
  company      Company      @relation(fields: [companyId], references: [id])
  companyId    String
  avatarUrl    String?
  password     String
  createdAt    DateTime     @default(now())
  inQueueSince DateTime?
  conferences  Conference[]
  otp          Otp?
}

model GuestUser {
  id           String       @id @default(uuid())
  firstName    String
  lastName     String
  userType     UserType     @default(REQUESTER)
  companyId    String
  status       Status       @default(AVAILABLE)
  company      Company      @relation(fields: [companyId], references: [id])
  conferences  Conference[]
  inQueueSince DateTime?
  createdAt    DateTime     @default(now())
}

model Company {
  id        String      @id @default(uuid())
  name      String
  cnpj      String      @unique
  users     User[]
  createdAt DateTime    @default(now())
  GuestUser GuestUser[]
}

model Conference {
  id          String           @id @default(uuid())
  short       String           @unique
  provider    User             @relation(fields: [providerId], references: [id])
  providerId  String
  status      ConferenceStatus @default(OPEN)
  GuestUser   GuestUser?       @relation(fields: [guestUserId], references: [id])
  guestUserId String?
}

model Otp {
  id        String   @id @default(uuid())
  code      Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}
